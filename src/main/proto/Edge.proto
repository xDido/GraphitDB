syntax = "proto3";

package dev.graphitdb.grpc;

option java_package = "dev.graphitdb.grpc.proto";
option java_outer_classname = "EdgeServiceProto";

// Define the Edge message
message Edge {
  string edgeId = 1;
  string sourceNodeId = 2;
  string destinationNodeId = 3;
  string label = 4;
  map<string, string> properties = 5;
}

// Request message for creating an edge
message CreateEdgeRequest {
  Edge edge = 1;
}

// Response message for edge creation
message CreateEdgeResponse {
  bool success = 1;
  string message = 2; // Optional: any relevant message, e.g., error or confirmation.
}

// Request message for fetching an edge
message GetEdgeRequest {
  string edgeId = 1;
}

// Response message for fetching an edge
message GetEdgeResponse {
  Edge edge = 1;
}

// Request message for fetching edges
message GetEdgesRequest {
  string vertexId = 1; // Specify the vertex ID to fetch edges for
}

// Response message for fetching edges
message GetEdgesResponse {
  repeated Edge edges = 1; // A list of edges
}

// Request message for deleting an edge
message DeleteEdgeRequest {
  string edgeId = 1;
}

// Response message for deleting an edge
message DeleteEdgeResponse {
  bool success = 1;
  string message = 2;
}

// Request message for updating an edge
message UpdateEdgeRequest {
  Edge edge = 1; // The edge to update
}

// Define the EdgeService gRPC service
service EdgeService {
  rpc CreateEdge(CreateEdgeRequest) returns (CreateEdgeResponse);
  rpc GetEdge(GetEdgeRequest) returns (GetEdgeResponse);
  rpc DeleteEdge(DeleteEdgeRequest) returns (DeleteEdgeResponse);
  rpc UpdateEdge(UpdateEdgeRequest) returns (CreateEdgeResponse); // Ensure this is defined
  rpc GetEdges(GetEdgesRequest) returns (GetEdgesResponse); // For getting edges

  rpc GetOutgoingEdges(GetEdgesRequest) returns (GetEdgesResponse);
  rpc GetIncomingEdges(GetEdgesRequest) returns (GetEdgesResponse);
}
